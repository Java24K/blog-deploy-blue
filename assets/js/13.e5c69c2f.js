(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{409:function(t,a,n){t.exports=n.p+"assets/img/abstractFactory01.5b418237.jpg"},410:function(t,a,n){t.exports=n.p+"assets/img/abstractFactory02.866f9121.jpg"},411:function(t,a,n){t.exports=n.p+"assets/img/abstractFactory03.5b418237.jpg"},412:function(t,a,n){t.exports=n.p+"assets/img/abstractFactory04.b56ec448.png"},501:function(t,a,n){"use strict";n.r(a);var r=n(0),e=Object(r.a)({},(function(){var t=this,a=t.$createElement,r=t._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h2",{attrs:{id:"一-抽象工厂介绍"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#一-抽象工厂介绍"}},[t._v("#")]),t._v(" 一.抽象工厂介绍")]),t._v(" "),r("p",[t._v("概念：")]),t._v(" "),r("ul",[r("li",[t._v("提供一个创建一系列相关或相互依赖对象的接口，而无须指定它们具体的类。")])]),t._v(" "),r("br"),t._v(" "),r("p",[t._v("抽象工厂特点：")]),t._v(" "),r("ul",[r("li",[t._v("抽象工厂针对的是多个产品等级结构即一个"),r("font",{attrs:{color:"red"}},[t._v("产品族")]),t._v("。(工厂方法针对的是"),r("font",{attrs:{color:"red"}},[t._v("一个产品等级结构")]),t._v(")")],1)]),t._v(" "),r("p",[t._v("产品等级结构与产品簇：")]),t._v(" "),r("p",[r("img",{attrs:{src:n(409),alt:"图1"}})]),t._v(" "),r("br"),t._v(" "),r("p",[t._v("工厂方法与产品等级结构：")]),t._v(" "),r("p",[r("img",{attrs:{src:n(410),alt:"图2"}})]),t._v(" "),r("br"),t._v(" "),r("p",[t._v("抽象工厂与产品簇：")]),t._v(" "),r("p",[r("img",{attrs:{src:n(411),alt:"图3"}})]),t._v(" "),r("br"),t._v(" "),r("h2",{attrs:{id:"二-抽象工厂作用"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#二-抽象工厂作用"}},[t._v("#")]),t._v(" 二.抽象工厂作用")]),t._v(" "),r("ol",[r("li",[t._v("分离接口和实现\n"),r("ul",[r("li",[t._v("客户端使用抽象工厂来创建需要的对象，而客户端根本就不知道具体的实现是谁，客户端只是面向产品的接口编程而已。也就是说，客户端从具体的产品实现中解耦。")])])]),t._v(" "),r("li",[t._v("使切换产品族变得容易\n"),r("ul",[r("li",[t._v("因为一个具体的工厂实现代表的是一个产品族，比如上面例子的从Intel系列到AMD系列只需要切换一下具体工厂。")])])])]),t._v(" "),r("br"),t._v(" "),r("h2",{attrs:{id:"三-抽象工厂类图与角色"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#三-抽象工厂类图与角色"}},[t._v("#")]),t._v(" 三.抽象工厂类图与角色")]),t._v(" "),r("blockquote",[r("p",[t._v("抽象工厂角色")])]),t._v(" "),r("p",[t._v("抽象工厂模式和工厂方法模式类似都是由四部分组成")]),t._v(" "),r("ol",[r("li",[t._v("抽象工厂（AbstractFactory）角色：担任这个角色的是抽象工厂模式的核心，是与应用系统的商业逻辑无关的。通常使用Java接口或者\n抽象Java类实现。所有的具体工厂必须实现这个Java接口或继承这个抽象的Java类。")]),t._v(" "),r("li",[t._v("具体工厂（Factory）角色：这个角色直接在客户端的调用下创建产品的实例，这个角色含有选择合适的产品对象的逻辑，而这个逻辑是\n与应用系统商业逻辑紧密相关的。")]),t._v(" "),r("li",[t._v("抽象产品（AbstractProduct）角色：担任这个角色的类是抽象工厂模式所创建的对象的父类，或它们共同拥有的接口。通常使用Java接\n口或者抽象Java类实现这一角色。")]),t._v(" "),r("li",[t._v("具体产品（Product）角色：抽象工厂模式所创建的任何产品对象都是一个具体的产品类的实例。这是客户端最终需要的东西，其内部一\n定充满了应用系统的商业逻辑。通常使用具体Java类实现这个角色。")])]),t._v(" "),r("br"),t._v(" "),r("blockquote",[r("p",[t._v("抽象工厂模式类图")])]),t._v(" "),r("p",[r("img",{attrs:{src:n(412),alt:"图1"}})]),t._v(" "),r("h2",{attrs:{id:"四-抽象工厂实现"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#四-抽象工厂实现"}},[t._v("#")]),t._v(" 四.抽象工厂实现")]),t._v(" "),r("ul",[r("li",[r("font",{attrs:{color:"red"}},[t._v("抽象工厂")])],1)]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("public interface ComputerFactory {\n    CPU createCPU();\n    MainBoard createMainBoard();\n}\n\n")])])]),r("ul",[r("li",[r("font",{attrs:{color:"red"}},[t._v("抽象产品角色")])],1)]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("public interface CPU {\n    void runCpu();\n}\n\npublic interface MainBoard {\n    void runMainBoard();\n}\n\n")])])]),r("ul",[r("li",[r("font",{attrs:{color:"red"}},[t._v("具体产品角色")])],1)]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v('\npublic class IntelCPU implements CPU {\n    void runCpu(){\n        System.out.println("intelCPU");\n    }\n}\npublic class IntelMainBoard implements MainBoard {\n    void runMainBoard(){\n        System.out.println("intelMainBoard");\n    }\n}\npublic class AMDCPU implements CPU {\n    void runCpu(){\n        System.out.println("AMDCPU");\n    }\n}\npublic class AMDMainBoard implements MainBoard {\n    void runMainBoard(){\n        System.out.println("AMDMainBoard");\n    }\n}\n')])])]),r("ul",[r("li",[r("font",{attrs:{color:"red"}},[t._v("具体工厂")])],1)]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("public class IntelComputerFactory implements ComputerFactory{\n    public CPU createCPU() {\n        return new IntelCPU();\n    }\n\n    public MainBoard createMainBoard() {\n        return new IntelMainBoard();\n    }\n}\n\n\npublic class AMDComputerFactory implements ComputerFactory{\n    public CPU createCPU() {\n        return new AMDCPU();\n    }\n\n    public MainBoard createMainBoard() {\n        return new AMDMainBoard();\n    }\n}\n")])])])])}),[],!1,null,null,null);a.default=e.exports}}]);