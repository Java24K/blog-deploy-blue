(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{408:function(t,r,e){t.exports=e.p+"assets/img/builder.139495f2.png"},500:function(t,r,e){"use strict";e.r(r);var n=e(0),a=Object(n.a)({},(function(){var t=this,r=t.$createElement,n=t._self._c||r;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h2",{attrs:{id:"一-建造者模式介绍"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一-建造者模式介绍"}},[t._v("#")]),t._v(" 一.建造者模式介绍")]),t._v(" "),n("p",[t._v("概念：")]),t._v(" "),n("ul",[n("li",[t._v("建造模式可以将一个产品的内部表象（internal representation）与产品的生产过程分割开来，从而可以使一个建造过程生成具有不同的内部表象的产品对象。")])]),t._v(" "),n("br"),t._v(" "),n("h2",{attrs:{id:"二-建造者模式作用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#二-建造者模式作用"}},[t._v("#")]),t._v(" 二.建造者模式作用")]),t._v(" "),n("ol",[n("li",[t._v("建造者模式将产品的结构和产品的零件的建造过程对客户端隐藏起来，把对建造过程进行指挥的责任和具体建造者零件的责任分割开来，"),n("font",{attrs:{color:"red"}},[t._v("达到责任划分和封装的目的")]),t._v("。")],1)]),t._v(" "),n("br"),t._v(" "),n("h2",{attrs:{id:"三-建造者模式类图与角色"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#三-建造者模式类图与角色"}},[t._v("#")]),t._v(" 三.建造者模式类图与角色")]),t._v(" "),n("blockquote",[n("p",[t._v("建造者模式角色")])]),t._v(" "),n("ol",[n("li",[t._v("抽象建造者（Builder）角色：给 出一个抽象接口，以规范产品对象的各个组成成分的建造。一般而言，此接口独立于应用程序的商业逻辑。模式中直接创建产品对象的是具体建造者 (ConcreteBuilder)角色。具体建造者类必须实现这个接口所要求的两种方法：一种是建造方法(buildPart1和 buildPart2)，另一种是返还结构方法(retrieveResult)。一般来说，产品所包含的零件数目与建造方法的数目相符。换言之，有多少 零件，就有多少相应的建造方法。")]),t._v(" "),n("li",[t._v("具体建造者（ConcreteBuilder）角色：担任这个角色的是与应用程序紧密相关的一些类，它们在应用程序调用下创建产品的实例。这个角色要完成的任务包括：1.实现抽象建造者Builder所声明的接口，给出一步一步地完成创建产品实例的操作。2.在建造过程完成后，提供产品的实例。")]),t._v(" "),n("li",[t._v("导演者（Director）角色：担任这个角色的类调用具体建造者角色以创建产品对象。应当指出的是，导演者角色并没有产品类的具体知识，真正拥有产品类的具体知识的是具体建造者角色。")]),t._v(" "),n("li",[t._v("产品（Product）角色：产品便是建造中的复杂对象。一般来说，一个系统中会有多于一个的产品类，而且这些产品类并不一定有共同的接口，而完全可以是不相关联的。")])]),t._v(" "),n("br"),t._v(" "),n("blockquote",[n("p",[t._v("建造者模式类图")])]),t._v(" "),n("p",[n("img",{attrs:{src:e(408),alt:"图1"}})]),t._v(" "),n("h2",{attrs:{id:"四-建造者模式实现"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#四-建造者模式实现"}},[t._v("#")]),t._v(" 四.建造者模式实现")]),t._v(" "),n("ul",[n("li",[n("font",{attrs:{color:"red"}},[t._v("产品角色")])],1)]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("public class Product {\n    /**\n     * 定义一些关于产品的操作\n     */\n    private String part1;\n    private String part2;\n    public String getPart1() {\n        return part1;\n    }\n    public void setPart1(String part1) {\n        this.part1 = part1;\n    }\n    public String getPart2() {\n        return part2;\n    }\n    public void setPart2(String part2) {\n        this.part2 = part2;\n    }\n}\n")])])]),n("ul",[n("li",[n("font",{attrs:{color:"red"}},[t._v("抽象建造者")])],1)]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("public interface Builder {\n    public void buildPart1();\n    public void buildPart2();\n    public Product retrieveResult();\n}\n\n")])])]),n("ul",[n("li",[n("font",{attrs:{color:"red"}},[t._v("具体建造者")])],1)]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('public class ConcreteBuilder implements Builder {\n\n    private Product product = new Product();\n    /**\n     * 产品零件建造方法1\n     */\n    @Override\n    public void buildPart1() {\n        //构建产品的第一个零件\n 　　　　product.setPart1("编号：9527");\n    }\n    /**\n     * 产品零件建造方法2\n     */\n    @Override\n    public void buildPart2() {\n        //构建产品的第二个零件\n 　　　　product.setPart2("名称：XXX");\n    }\n    /**\n     * 产品返还方法\n     */\n    @Override\n    public Product retrieveResult() {\n        return product;\n    }\n}\n\n')])])]),n("ul",[n("li",[n("font",{attrs:{color:"red"}},[t._v("导演者")])],1)]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("public class Director {\n    /**\n     * 持有当前需要使用的建造器对象\n     */\n    private Builder builder;\n    /**\n     * 构造方法，传入建造器对象\n     * @param builder 建造器对象\n     */\n    public Director(Builder builder){\n        this.builder = builder;\n    }\n    /**\n     * 产品构造方法，负责调用各个零件建造方法\n     */\n    public void construct(){\n        builder.buildPart1();\n        builder.buildPart2();\n    }\n}\n\n")])])]),n("ul",[n("li",[t._v("客户端类")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("public class Client {\n    public static void main(String[]args){\n        Builder builder = new ConcreteBuilder();\n        Director director = new Director(builder);\n        director.construct();\n        Product product = builder.retrieveResult();\n        System.out.println(product.getPart1());\n        System.out.println(product.getPart2());\n    }\n}\n")])])])])}),[],!1,null,null,null);r.default=a.exports}}]);